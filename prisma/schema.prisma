generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
  COMPANY
  TUTOR
  SUPERADMIN
}

enum EventCategory {
  TECHNOLOGY
  DESIGN
  ENTREPRENEURSHIP
  MARKETING
  EDUCATION
  NETWORKING
}

enum EventStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum ChatType {
  DIRECT
  GROUP
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  password    String
  name        String?
  username    String?     @unique
  avatar      String?
  location    String?
  bio         String?
  role        UserRole   @default(USER)
  status      UserStatus @default(ACTIVE)
  isOnline    Boolean    @default(false)
  lastSeen    DateTime?    
  joinDate    DateTime @default(now())     
  connections Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  skills      String[]   @default([])
  tags        String[]   @default([])

  organizedEvents     Event[]              @relation("EventOrganizer")
  eventRegistrations  EventRegistration[]
  sentMessages        Message[]            @relation("MessageSender")
  chatParticipants    ChatParticipant[]
  blockedRecords   UserBlock[] @relation("BlockedUser")
  blockedByRecords UserBlock[] @relation("BlockAdmin")
  post Post[]
  company Vacancy[]


  @@index([email])
  @@index([username])
  @@index([status])
  @@index([isOnline])

  @@map("users")
}

model Event {
  id          String        @id @default(uuid())
  title       String
  description String?
  date        String        
  time        String        
  location    String
  category    EventCategory
  status      EventStatus   @default(ACTIVE)
  attendees   Int           @default(0)
  
  organizerId String
  organizer   User          @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  registrations EventRegistration[]

  @@index([date])
  @@index([category])
  @@index([status])

  @@map("events")
}

model EventRegistration {
  id          String   @id @default(uuid())
  userId      String
  eventId     String
  registeredAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_registrations")
}

model Chat {
  id          String    @id @default(uuid())
  name        String?  
  type        ChatType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id        String   @id @default(uuid())
  chatId    String
  userId    String
  joinedAt  DateTime @default(now())
  
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])

  @@map("chat_participants")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  
  chatId      String
  senderId    String
  
  read        Boolean  @default(false)
  
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
  @@index([timestamp])

  @@map("messages")
}



model Vacancy {
  id          String        @id @default(uuid())
  title       String
  description String
  location    String
  salary      Int?
  requirements String[]
  companyId   String
  company     User          @relation(fields: [companyId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("vacancys")
}


model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  tags        String[]   
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())

  @@map("posts")
}

model Plan {
  id           String   @id @default(uuid())
  name         String
  price        Int
  durationDays Int
  features     Json
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("plans")
}

model UserBlock {
  id           String   @id @default(uuid())
  userId       String   
  blockedById  String   
  reason       String?
  blockedAt    DateTime @default(now())
  unblockAt    DateTime 
  isActive     Boolean  @default(true)

  user         User     @relation("BlockedUser", fields: [userId], references: [id], onDelete: Cascade)
  blockedBy    User     @relation("BlockAdmin", fields: [blockedById], references: [id])

  @@index([userId])
  @@index([isActive])

  @@map("userBlock")
}

model ErrorLog {
  id          String   @id @default(uuid())
  message     String
  errorType   String?
  stack       String?
  module      String?  
  controller  String?  
  service     String?  
  route       String?
  method      String?
  createdAt   DateTime @default(now())

  @@map("error_logs")
}
